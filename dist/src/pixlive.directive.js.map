{"version":3,"sources":["../../src/pixlive.directive.ts"],"names":[],"mappings":"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","file":"pixlive.directive.js","sourceRoot":"","sourcesContent":["import { Directive, ElementRef, OnInit, Renderer } from '@angular/core';\nimport { Platform, ViewController } from 'ionic-angular';\n\ndeclare var window;\n\n\nexport class PixliveDirective implements OnInit {\n\n  /**\n   * Cordova PixLive Camera AR view\n   */\n  private arView: PixliveARView;\n\n  /**\n   * HTML element displayed instead of the camera when serving the file on the browser for development\n   */\n  private fakeCamera: HTMLElement;\n\n  constructor(private platform: Platform, private el: ElementRef, private renderer: Renderer, private viewCtrl: ViewController) {\n  }\n\n  /**\n   * Initializes the AR view lifecycle\n   */\n  private initArViewLifeCycle() {\n    this.viewCtrl.willEnter.subscribe(() => {\n      if (this.arView) {\n        this.arView.beforeEnter();\n        this.onOrientationChange();\n      }\n    });\n    this.viewCtrl.didEnter.subscribe(() => {\n      if (this.arView) {\n        this.arView.afterEnter();\n      }\n      if (this.fakeCamera) {\n        this.renderer.setElementStyle(this.fakeCamera, 'display', 'block');\n      }\n    });\n    this.viewCtrl.willLeave.subscribe(() => {\n      if (this.arView) {\n        this.arView.beforeLeave();\n      }\n      if (this.fakeCamera) {\n        this.renderer.setElementStyle(this.fakeCamera, 'display', 'none');\n      }\n    });\n    this.viewCtrl.didLeave.subscribe(() => {\n      if (this.arView) {\n        this.arView.afterLeave();\n      }\n    });\n  }\n\n  /**\n   * Call this method after an orientation change for resizing the AR view\n   * @param element\n   * @param view\n   */\n  private onOrientationChange() {\n    setTimeout(() => {\n      let rect = this.el.nativeElement.getBoundingClientRect();\n      this.arView.resize(rect.left, rect.top, rect.width, rect.height);\n    }, 300);\n  }\n\n  ngOnInit() {\n    this.renderer.setElementStyle(this.el.nativeElement, 'display', 'inline-block');\n\n    this.initArViewLifeCycle();\n\n    this.platform.ready().then(() => {\n      setTimeout(() => {\n        let rect = this.el.nativeElement.getBoundingClientRect();\n        if (window.cordova) {\n          // Create the camera view\n          this.arView = window.cordova.plugins.PixLive.createARView(rect.left, rect.top, rect.width, rect.height);\n          window.addEventListener(\"orientationchange\", () => this.onOrientationChange(), false);\n        } else {\n          // As a fallback, we create a grey element for replacing the camera view. Useful for dev purpose.\n          let fakeCamera = document.createElement(\"DIV\");\n          document.body.appendChild(fakeCamera);\n          this.renderer.setElementStyle(fakeCamera, 'position', 'fixed');\n          this.renderer.setElementStyle(fakeCamera, 'background-color', 'gray');\n          this.renderer.setElementStyle(fakeCamera, 'left', rect.left + 'px');\n          this.renderer.setElementStyle(fakeCamera, 'top', rect.top + 'px');\n          this.renderer.setElementStyle(fakeCamera, 'width', rect.width + 'px');\n          this.renderer.setElementStyle(fakeCamera, 'height', rect.height + 'px');\n          this.fakeCamera = fakeCamera;\n        }\n      }, 300);\n    });\n\n    // The AR view is placed below the application so we set all views that are on top transparent.\n    let node = this.el.nativeElement.parentElement;\n    while (node) {\n      this.renderer.setElementStyle(node, 'background-color', 'transparent');\n      node = node.parentElement;\n    }\n  }\n\n  /**\n   * Defines whether the view is clickable. If the view is clickable, it will intercept the touch event.\n   * If a view in on top of the component, then you must disable the click interception.\n   * @param enabled true if the view is clickable and intercept all touch events, false otherwise.\n   */\n  public setTouchEnabled(enabled: boolean) {\n    if (enabled) {\n      this.arView.enableTouch();\n    } else {\n      this.arView.disableTouch();\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'pixlive-camera-view'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n{type: ElementRef, },\n{type: Renderer, },\n{type: ViewController, },\n];\n}\n\ninterface PixliveARView {\n  beforeEnter();\n  afterEnter();\n  enableTouch();\n  disableTouch();\n  beforeLeave();\n  afterLeave();\n  resize(left: number, top: number, width: number, height: number);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
{"version":3,"sources":["../../src/pixlive-service.ts"],"names":[],"mappings":"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","file":"pixlive-service.js","sourceRoot":"","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\nimport { Platform } from 'ionic-angular';\n\nimport { Observable } from 'rxjs';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\n\ndeclare var window;\n\n/**\n * Service for interacting with the PixLive SDK.\n * Call the init() method when starting your application.\n */\n\nexport class PixliveService {\n\n  /**\n   * BehaviorSubject keeping track of the synchronization progress.\n   */\n  private synchronizationProgress: BehaviorSubject<number> = new BehaviorSubject(101);\n\n  private annotationPresence: Subject<boolean> = new Subject();\n  private eventFromContent: Subject<EventFromContent> = new Subject();\n  private enterContext: Subject<string> = new Subject();\n\n  constructor(\n    private ngZone: NgZone,\n    private platform: Platform\n  ) { }\n\n  /**\n   * Initializes the SDK. In particular, it registers several listeners for the PixLive events.\n   * @param gcmSenderId the Google GCM sender ID for the push notifications. Leave it empty if you do not want to enable it.\n   */\n  public init(gcmSenderId?: string) {\n    this.platform.ready().then(() => {\n      if (window.cordova) {\n        if (gcmSenderId) {\n          window.cordova.plugins.PixLive.setNotificationsSupport(true, gcmSenderId);\n        }\n        // Listen for different PixLive events\n        window.cordova.plugins.PixLive.onEventReceived = (event) => {\n          console.log(\"PixLive new event: \" + JSON.stringify(event));\n          if (event.type === \"presentAnnotations\") {\n            this.ngZone.run(() => {\n              this.annotationPresence.next(true);\n            });\n          } else if (event.type === \"hideAnnotations\") {\n            this.ngZone.run(() => {\n              this.annotationPresence.next(false);\n            });\n          } else if (event.type === \"eventFromContent\") {\n            //Example: {\"type\":\"eventFromContent\",\"eventName\":\"multipleChoice\",\"eventParams\":\"{\\\"question\\\":\\\"Quel est la profondeur du lac de gruyere?\\\",\\\"answers\\\":[\\\"1m\\\",\\\"10m\\\",\\\"100m\\\"],\\\"correctAnswer\\\":2,\\\"hint\\\":\\\"On peut se noyer\\\"}\"}\n            this.ngZone.run(() => {\n              let eventFromContent = new EventFromContent();\n              eventFromContent.name = event.eventName;\n              eventFromContent.params = event.eventParams;\n              this.eventFromContent.next(eventFromContent);\n            });\n          } else if (event.type === \"enterContext\") {\n            //Example: {\"type\":\"enterContext\",\"context\":\"q7044o3xhfqkc7q\"}\n            this.enterContext.next(event.context);\n          } else if (event.type === \"syncProgress\") {\n            this.synchronizationProgress.next(parseInt(\"\" + (event.progress * 100)));\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Gets an observable for listening on synchronization progress. The last known\n   * value is given when the listener subscribes to the observable.\n   * A value of 100 means that the synchronization is over.\n   * A value above 100 means that an error occured during the synchronization.\n   */\n  public getSynchronizationProgress(): Observable<number> {\n    return this.synchronizationProgress.asObservable();\n  }\n\n  /**\n   * Gets an observable that is called when the event \"presentAnnotations\" or\n   * \"hideAnnotations\" (true/false respectively) is called. It informs that\n   * an AR annotation is being displayed or not.\n   */\n  public getAnnotationPresenceObservable(): Observable<boolean> {\n    return this.annotationPresence.asObservable();\n  }\n\n  /**\n   * Gets an observable that is called when an event from content is triggered (e.g. coupon)\n   */\n  public getEventFromContentObservable(): Observable<EventFromContent> {\n    return this.eventFromContent.asObservable();\n  }\n\n  /**\n   * Gets an observable that is called when a context is entered (i.e. activated). It gives\n   * the public ID of the context.\n   */\n  public getEnterContextObservable(): Observable<string> {\n    return this.enterContext.asObservable();\n  }\n\n  /**\n   * Synchronize the PixLive SDK with the web platform.\n   * The synchronization can be done in different ways.\n   *\n   * 1) The synchronization can be done without using the tags, in this case, an empty\n   * array is given as parameter.\n   *\n   * 2) The syncronization can be done with one or more tags. Use an array of strings: ['tag1', 'tag2'].\n   * In this case, all contents having one or more of the given tags will be synchronized.\n   * Think of it as => (tag1 OR tag2).\n   *\n   * 3) The synchronization can be done with a combination of tags. Example: [['lang_en', 'tag1'], ['lang_en', 'tag2']].\n   * In this case, the contents having tags 'lang_en' AND 'tag1' will be synchonized together with the contents having the 'lang_en' AND 'tag2'.\n   * Think of it as => (lang_en AND tag1) OR (lang_en AND tag2).\n   *\n   * @param tags\n   */\n  public sync(tags) {\n    console.log(\"Synchronization with tags: \" + JSON.stringify(tags));\n    this.synchronizationProgress.next(0);\n    this.platform.ready().then(() => {\n      if (window.cordova) {\n        window.cordova.plugins.PixLive.synchronize(tags, (contexts) => {\n          this.ngZone.run(() => {\n            this.synchronizationProgress.next(100);\n          });\n        }, (reason) => {\n          this.ngZone.run(() => {\n            this.synchronizationProgress.next(102);\n          });\n        });\n      } else {\n        // The plugin is not available, we simulate a synchronization for development.\n        setTimeout(() => {\n          this.synchronizationProgress.next(25);\n          setTimeout(() => {\n            this.synchronizationProgress.next(50);\n            setTimeout(() => {\n              this.synchronizationProgress.next(75);\n              setTimeout(() => {\n                this.synchronizationProgress.next(103);\n              }, 500);\n            }, 500);\n          }, 500);\n        }, 500);\n      }\n    });\n  }\n\n  /**\n   * Gets the nearby GPS points\n   * @param latitude the current latitude\n   * @param longitude the current longitude\n   */\n  public getNearbyGpsPoints(latitude: number, longitude: number): Promise<GPSPoint[]> {\n    return new Promise((resolve, reject) => {\n      if (window.cordova) {\n        window.cordova.plugins.PixLive.getNearbyGPSPoints(latitude, longitude,\n          (data) => {\n            this.ngZone.run(() => {\n              resolve(data as GPSPoint[]);\n            });\n          },\n          () => {\n            reject(\"getNearbyGpsPoints failed\");\n          });\n      } else {\n        reject(\"getNearbyGpsPoints failed: no cordova plugin\");\n      }\n    });\n  }\n\n  /**\n   * Gets all GPS points in the given bounding box.\n   * @param minLat the minimum latitude\n   * @param minLon the minimum longitude\n   * @param maxLat the maximum latitude\n   * @param maxLon the maximum longitude\n   */\n  public getGpsPointsInBoundingBox(minLat, minLon, maxLat, maxLon): Promise<GPSPoint[]> {\n    return new Promise((resolve, reject) => {\n      if (window.cordova) {\n        window.cordova.plugins.PixLive.getGPSPointsInBoundingBox(minLat, minLon, maxLat, maxLon,\n          (data) => {\n            resolve(data as GPSPoint[]);\n          },\n          () => {\n            reject(\"Error\");\n          });\n      } else {\n        reject(\"No cordova plugin\");\n      }\n    });\n  }\n\n\n  /**\n   * Return the specified context\n   * @param contextId the ID of the context\n   */\n  public getContext(contextId: string): Promise<Context> {\n    return new Promise((resolve, reject) => {\n      if (window.cordova) {\n        window.cordova.plugins.PixLive.getContext(contextId,\n          (data) => {\n            this.ngZone.run(() => {\n              resolve(data as Context);\n            });\n          },\n          () => {\n            reject(\"getContext failed\");\n          });\n      } else {\n        reject(\"getContext failed: no cordova plugin\");\n      }\n    });\n  }\n\n  /**\n   * Opens the given context\n   * @param contextId the ID of the context to open\n   */\n  public activate(contextId: string) {\n    this.getContext(contextId).then(context => context.activate());\n  }\n\n  /**\n   * Computes the distance between to GPS points\n   * @param latitude1 the latitude of the first point\n   * @param longitude1 the longitude of the first point\n   * @param latitude2 the latitude of the second point\n   * @param longitude2 the longitude of the second point\n   */\n  public computeDistanceBetweenGPSPoints(latitude1: number, longitude1: number, latitude2: number, longitude2: number): Promise<number> {\n    return new Promise((resolve, reject) => {\n      if (window.cordova) {\n        window.cordova.plugins.PixLive.computeDistanceBetweenGPSPoints(latitude1, longitude1, latitude2, longitude2,\n          (data) => {\n            this.ngZone.run(() => {\n              resolve(data);\n            });\n          },\n          () => {\n            reject(\"computeDistanceBetweenGPSPoints failed\");\n          });\n      } else {\n        reject(\"computeDistanceBetweenGPSPoints failed: no cordova plugin\");\n      }\n    });\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\n/**\n * Class representing a PixLive Maker GPS point.\n */\nexport class GPSPoint {\n  lat: number;\n  lon: number;\n  detectionRadius: number;\n  distanceFromCurrentPos: number;\n  category: string;\n  label: string;\n  contextId: string;\n}\n\n/**\n * Class representing a Context.\n */\nexport class Context {\n  activate: () => void;\n  contextId: string;\n  name: string;\n  description: string;\n  imageHiResURL: string;\n  imageThumbnailURL: string;\n  notificationTitle: string;\n  notificationMessage: string;\n}\n\n/**\n * Class representing a Event triggered by a content\n */\nexport class EventFromContent {\n  name: string;\n  params: string;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}